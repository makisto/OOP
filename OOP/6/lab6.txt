#include <SFML/Graphics.hpp>
#include "figures.h"
using namespace sf;
int Point::ScreenHeight = 0;
int Point::ScreenWidth = 0;

int main()
{
	int ch = 1;
	bool mousec = false;
		sf::RenderWindow window(sf::VideoMode(1270, 720), "SFML works!");
		sf::CircleShape shape(100.f);
		Point::setScreen(1270, 720);
		shape.setFillColor(sf::Color::Green);
		Point* p[5];
		Rectangle* r[2];
		p[0] = new Point(100, 100, 255, 255, 255);
		p[1] = new Circle(100, 100, 90, 255, 255, 255);
		p[2] = new Triangle(170, 170, 100, 255, 255, 255);
		p[3] = new Square(100, 100, 90, 255, 255, 255);
		p[4] = new Square(100, 100, 90, 255, 255, 255);
		r[0] = new Rectangle(100, 100, 45, 90, 255, 255, 255);
		r[1] = new Line(170, 170, 100, 100, 255, 255, 255);
		Ellipse q(100, 100, 45, 90, 255, 255, 255);
		//Square p(100, 100, 90, 255, 255, 255);
		Clock clock;
		while (window.isOpen())
		{
				float time = clock.getElapsedTime().asMicroseconds();
				clock.restart();
				time = time / 1000;
				sf::Event event;
				while (window.pollEvent(event))
				{
					if ((event.key.code == Mouse::Left) && (mousec == false))
					{
						mousec = true;
						for (int i = 0; i < 5; i++)
						{
							if (p[i]->isMove)
							{
								p[i]->isMove = false;
								p[i]->StopMove();
							}
							else
							{
								p[i]->isMove = true;
								p[i]->RandMove();
							}
						}
						for (int j = 0; j < 2; j++)
						{
							if (r[j]->isMove)
							{
								r[j]->isMove = false;
								r[j]->StopMove();
							}
							else
							{
								r[j]->isMove = true;
								r[j]->RandMove();
							}
						}
						if (q.isMove)
						{
							q.isMove = false;
							q.StopMove();
						}
						else
						{
							q.isMove = true;
							q.RandMove();
						}
					}
					if ((event.key.code == Mouse::Right) && (mousec == false))
					{
						mousec = true;
						for (int i = 0; i < 5; i++)
						{
							if (p[i]->isRot)
							{
								p[i]->isRot = false;
							}
							else
							{
								p[i]->isRot = true;
							}
						}
						for (int j = 0; j < 2; j++)
						{
							if (r[j]->isRot)
							{
								r[j]->isRot = false;
							}
							else
							{
								r[j]->isRot = true;
							}
						}
						if (q.isRot)
						{
							q.isRot = false;
						}
						else
						{
							q.isRot = true;
						}
					}
					if (event.type == Event::MouseButtonReleased)
						if ((event.key.code == Mouse::Left) || (event.key.code == Mouse::Right))
							mousec = false;
					if (event.type == sf::Event::Closed)
						window.close();
				}
				for (int i = 0; i < 5; i++)
				{
					if (p[i]->isMove)
					{
						p[i]->Move(1);
					}
					if (p[i]->isRot)
						p[i]->Rot();
				}
				for (int j = 0; j < 2; j++)
				{
					if (r[j]->isMove)
					{
						r[j]->Move(1);
					}
					if (r[j]->isRot)
						r[j]->Rot();
				}
				if (q.isMove)
				{
					q.Move(1);
				}
				if (q.isRot)
				{
					q.Rot();
				}
				window.clear();
				for (int i = 0; i < 5; i++)
				{
					p[i]->reload();
					window.draw(p[i]->Shape());
				}
				for (int j = 0; j < 2; j++)
				{
					r[j]->reload();
					window.draw(r[j]->Shape());
				}
				q.reload();
				window.draw(q.Shape());
				window.display();
				sleep(milliseconds(20));
		}
	return 0;
}